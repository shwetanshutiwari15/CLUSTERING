import numpy as np
from scipy.spatial import distance_matrix
import pandas as pd
import matplotlib.pyplot as plt


def k_means(X, K):
    nrow = X.shape[0]
    ncol = X.shape[1]
  
# pick K random data points as initial centroids
    initial_centroids = np.random.choice(nrow, K, replace=False)
    centroids = X[initial_centroids] 
    
    centroids_old = np.zeros((K, ncol))
    cluster_assignments = np.zeros(nrow)
    
    #print(np.min(centroids[2])) 
    #print(centroids_old)
    #print(cluster_assignments)
    
    while (centroids_old != centroids).any():
        centroids_old = centroids.copy()

        # compute distances between data points and centroids
        dist_matrix = distance_matrix(X, centroids, p=2)
         
        #print(dist_matrix)
        # step 1: find closest centroid for each data point
        for i in np.arange(nrow):
            d = dist_matrix[i]
             #print(np.min(d[1]))
            #a = (np.min(d[i]))
            #b = 0
            closest_centroid = (np.where(d == np.min(d)))[0][0]
            #closest centroid = np.min(d)
             # associate data point with closest centroid
            cluster_assignments[i] = closest_centroid

        # step 2: recompute centroids
        for k in np.arange(K):
            Xk = X[cluster_assignments == k]
            centroids[k] = np.apply_along_axis(np.mean, axis=0, arr=Xk)

    return (centroids, cluster_assignments)
          
#data = np.genfromtxt('Wholesale customers data.csv', dtype=int, delimiter=',', comments='#')  

#data1 = np.column_stack(data)
                     

#print(data1)
dataset = pd.read_csv('tomcat.csv')
x = dataset.iloc[:, 3:23].values
y = dataset.iloc[:, 23].values
data1 = np.column_stack((x,y))

K = 4
k_means_result = k_means(data1, K)
centroids = k_means_result[0]
cluster_assignments = (k_means_result[1]).tolist()

print(centroids)
#print(cluster_assignments)
colors = ['b', 'g', 'r', 'c', 'm', 'y', 'k', 'w']  
f = lambda X: colors[int(X)]
cluster_assignments = list(map(f, cluster_assignments))

my_dpi=200

plt.figure(figsize=(600/my_dpi, 600/my_dpi), dpi=my_dpi)

plt.xlabel('X', fontsize=12)
plt.ylabel('Y', fontsize=12) 
plt.title('K-means clustering\n', fontsize=12)

plt.scatter(data1[:,18], data1[:,19], color=cluster_assignments, s=20)

#plt.xticks(np.arange(0, 21, 5), fontsize=12)
#plt.yticks(np.arange(-5, 21, 5), fontsize=12)

plt.show()
 
